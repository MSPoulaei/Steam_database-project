--QUERIES

--FETCH ALL GAMES WITH SPECIFIC GENRE
DECLARE @GENRE_NAME NVARCHAR(150);
SET @GENRE_NAME = 'ACTION';
SELECT G.*
FROM [Game] G
         INNER JOIN GameGenre GG ON G.GameID = GG.GameID
         INNER JOIN Genre GE on GG.GenreID = GE.GenreID
WHERE GE.NAME = @GENRE_NAME

GO

-- FETCH ALL GAMES MADE BY SPECIFIC DEVELOPER
DECLARE @DEVELOPER NVARCHAR(150);
SET @DEVELOPER = 'Rockstar North';

SELECT *
FROM GAME G
         INNER JOIN GameDeveloper GD ON G.GameID = GD.GameID
         INNER JOIN Developer D ON GD.DeveloperID = D.ID
WHERE D.Name = @DEVELOPER
GO

-- FETCH ALL GAMES MADE BY SPECIFIC PUBLISHER
DECLARE @PUBLISHER NVARCHAR(150);
SET @PUBLISHER = 'Rockstar';

SELECT *
FROM GAME G
         INNER JOIN Publisher P ON G.PublisherID = P.ID
WHERE P.Name = @PUBLISHER;

GO

--FETCH ALL GAMES THAT A USER HAS
DECLARE @USERNAME NVARCHAR(150);
SET @USERNAME = 'sadegh369';

SELECT G.*, UG.*
FROM [User] U
         INNER JOIN UserGame UG ON U.UserID = UG.UserID
         INNER JOIN Game G ON UG.GameID = G.GameID

GO


--SORT GAMES ON GENRE
SELECT G.*,GE.NAME
FROM GAME G
         INNER JOIN GameGenre GG ON G.GameID = GG.GameID
         INNER JOIN Genre GE on GG.GenreID = GE.GenreID
ORDER BY GE.GenreID

GO

--GAME PAGE
DECLARE @GAMENAME NVARCHAR(150);
SET @GAMENAME = 'GOD OF WAR 4';

SELECT *
FROM GAME G
         LEFT OUTER JOIN GameDeveloper GD ON G.GameID = GD.GameID
         LEFT OUTER JOIN Developer D ON GD.DeveloperID = D.ID
         LEFT OUTER JOIN GameGenre GG ON G.GameID = GG.GameID
         LEFT OUTER JOIN Genre GE on GE.GenreID = GG.GenreID
         LEFT OUTER JOIN GameLanguage GL on G.GameID = GL.GameID
         LEFT OUTER JOIN GameTag GT on G.GameID = GT.GameID
         LEFT OUTER JOIN EventsAnnouncements EA on G.GameID = EA.GameID
         LEFT OUTER JOIN Access A on G.AccessID = A.AccessID
         LEFT OUTER JOIN Franchise F on G.FranchiseID = F.FranchiseID
WHERE G.Title = @GAMENAME;

GO

--Top Seller

SELECT G.GameID, G.Title, G.Price
FROM Game G
         INNER JOIN UserGame UG on G.GameID = UG.GameID
GROUP BY G.GameID, Title, G.Price
ORDER BY COUNT(UG.ID) DESC

GO--OR

SELECT G.*
FROM GAME G
ORDER BY G.NOofSells DESC

GO

--GET LATEST GAMES
SELECT G.*
FROM GAME G
ORDER BY G.ReleaseDate DESC

GO

--FETCH MESSAGES OF A SPECIFIC CHAT
DECLARE @CHATID INTEGER;
SET @CHATID = 1;

SELECT *
FROM Message M
WHERE ChatID = @CHATID

GO

--SORT GAMES ON HAVING OFFER

SELECT G.*,O.DiscountPercentage
FROM Game G
         INNER JOIN Offer O on G.GameID = O.GameID
WHERE O.DueTime >= SYSDATETIME()



--SEARCH A GAME
DECLARE @GAMENAME2 NVARCHAR(150);
SET @GAMENAME2 = 'GOD';

SELECT *
FROM GAME G
WHERE G.Title LIKE '%' + @GAMENAME2 + '%'

GO

--SORT GAMES ON OS
SELECT *
FROM GAME G
         LEFT OUTER JOIN OS O ON G.OS_ID = O.OS_ID
ORDER BY O.OS_ID

GO

--SEARCH GAMES OF A FRANCHISE
DECLARE @FRANCHISENAME NVARCHAR(150)='GOD OF WAR';

SELECT *
FROM GAME G
         INNER JOIN Franchise F ON G.FranchiseID = F.FranchiseID
WHERE F.Name =@FRANCHISENAME

GO

--SEARCH MESSAGE OF A CHAT
DECLARE @CHATID2 INTEGER=1;
DECLARE @SEARCH NVARCHAR(150)=N'سلام';

SELECT *
FROM Message M
WHERE M.ChatID = @CHATID2
  AND M.Content LIKE '%' + @SEARCH + '%'

GO

--FETCH MESSAGES OF TWO PEOPLE
DECLARE @USER1 INTEGER=2;
DECLARE @USER2 INTEGER=3;
DECLARE @CHATID3 INTEGER=(SELECT TOP 1 C.ID
                          FROM Chat C
                          WHERE (C.ReceiverID = @USER1 AND C.StarterID = @USER2)
                             OR C.StarterID = @USER1 AND C.ReceiverID = @USER2);
SELECT *
FROM Message M
WHERE M.ChatID = @CHATID3

GO

--POPULAR GAMES
SELECT G.GameID, G.Title, AVG(R.Points) AS AVG_POINT
FROM [Game] G
         LEFT OUTER JOIN Review R ON G.GameID = R.GameID
GROUP BY G.GameID, R.Points, G.Title
ORDER BY AVG(R.Points) DESC

--FETCH FRIENDS OF A USER
DECLARE @USERIDF INTEGER=3;

SELECT F.RecieverID AS FRIEND_ID
FROM Friendship F
WHERE F.isAccepted = 1
  AND F.RequesterID = @USERIDF
UNION
SELECT F.RequesterID AS FRIEND_ID
FROM Friendship F
WHERE F.isAccepted = 1
  AND F.RecieverID = @USERIDF

GO

--COMMENTS OF A GAME

DECLARE @GAMEIDC INTEGER=2;

SELECT *
FROM Comment C
WHERE C.GameID = @GAMEIDC

--COMMENTS OF A USER
DECLARE @USERIDC INTEGER=3;

SELECT *
FROM Comment C
WHERE C.UserID = @USERIDC

--COMMENTS WITHIN YEAR OF 2020
SELECT *
FROM Comment C
WHERE C.CreationDate BETWEEN '2020-01-01 00:00:00' AND '2021-01-01 00:00:00'

